from .bot import Bot
from .database import Database
from .configuration import Configuration

import discord
from pychatgpt import Chat


# Class for handling discord messages and interacting with ChatGPT
class MessageHandler:
    def __init__(self, bot: Bot, config: Configuration, database: Database):
        self.bot = bot.client
        self.config = config
        self.chat = Chat(email=config.openai_email, password=config.openai_password)
        self.database = database

    async def on_message(self, message: discord.Message):
        # Ignore messages sent by the bot itself or other bots
        if message.author == self.bot.user or message.author.bot:
            return

        # Retrieve the parent and conversation id of the conversation from the database
        database_result = self.database.get_conversation_id_and_parent_id(message)

        conversation_id = ''
        parent_id = ''
        if database_result is not None:
            conversation_id = database_result[0]
            parent_id = database_result[1]

        # Continue the previous conversation or start a new one if the bot is mentioned
        if not conversation_id and message.mentions and self.bot.user in message.mentions:
            await self.start_new_conversation(message)
        elif conversation_id and parent_id and message.mentions and self.bot.user in message.mentions:
            await self.continue_conversation(message, conversation_id, parent_id)

    async def start_new_conversation(self, message: discord.Message):
        """
                Asynchronously starts a new conversation with ChatGPT.

                Args:
                    message (:obj:`discord.Message`): A Discord `Message` object containing the prompt for the conversation.

                Returns:
                    None
                """
        content = self.clean_message_content(message)
        # Start a "typing" animation in the channel where the message was sent
        async with message.channel.typing():
            print(f'Starting a new conversation with Prompt: \n{content}')
            # Generate the title for the thread
            thread_title = self.generate_thread_title(content)
            # Reset the conversation ID
            self.chat.conversation_id = ''
            self.chat.previous_convo_id = ''

            # Send the prompt to ChatGPT
            chat_response, parent_id, conversation_id = self.chat.ask(content)
            thread = await message.create_thread(name=thread_title, auto_archive_duration=60)
            # Send the response to the user
            await self.send_response(message, chat_response, parent_id, conversation_id, thread)

    async def continue_conversation(self, message: discord.Message, conversation_id, parent_id):
        """
                Asynchronously continues an existing conversation with ChatGPT.

                Args:
                    message (:obj:`discord.Message`): A Discord `Message` object containing the prompt for the conversation.
                    conversation_id (:obj:`str`): The ID of the conversation to continue.
                    parent_id (:obj:`str`): The parent ID of the conversation to continue.

                Returns:
                    None
                """
        # Start a "typing" animation in the channel where the message was sent
        async with message.channel.typing():
            content = self.clean_message_content(message)
            print(f'Continuing conversation with Prompt: \n{content}')
            chat_response, parent_id, conversation_id = \
                self.chat.ask(content, conversation_id=conversation_id, previous_convo_id=parent_id)
            await self.send_response(message, chat_response, parent_id, conversation_id, message.channel)

    def generate_thread_title(self, prompt: str):
        """
                Generates a thread title for a conversation with ChatGPT.

                Args:
                    prompt (:obj:`str`): The prompt for the conversation.

                Returns:
                    :obj:`str`: The thread title generated by ChatGPT.
                """
        self.chat.conversation_id = ''
        self.chat.previous_convo_id = ''
        title: str = ""
        title, _, _ = self.chat.ask(f'{self.config.thread_title_prompt}\n{prompt}')
        # Truncate the response to 100 characters
        if len(title) > 100:
            title = title[:100]
        return title.title()

    async def send_response(self, message: discord.Message, response: str, parent_id: str,
                            conversation_id: str, thread: discord.Thread):
        """
                Asynchronously sends the response from ChatGPT to the user.

                Args:
                    message (:obj:`discord.Message`): The original Discord `Message` object.
                    response (:obj:`str`): The response from ChatGPT.
                    parent_id (:obj:`str`): The parent ID of the conversation.
                    conversation_id (:obj:`str`): The ID of the conversation.
                    thread (:obj:`discord.Thread`): The Discord `Thread` object where the response will be sent.

                Returns:
                    None
                """

        # Send the response in chunks of 2000 characters
        response_chunks = [response[i:i + 2000] for i in range(0, len(response), 2000)]
        for chunk in response_chunks:
            response = await thread.send(content=chunk)
            self.add_message_to_database(response, parent_id, conversation_id, thread.id)

    def add_message_to_database(self, message: discord.Message, parent_id: str, conversation_id: str, thread_id: int):
        """
                Adds a Discord `Message` object to the database.

                Args:
                    message (:obj:`discord.Message`): The Discord `Message` object to add to the database.
                    parent_id (:obj:`str`): The parent ID of the conversation.
                    conversation_id (:obj:`str`): The ID of the conversation.
                    thread_id (:obj:`str`): The ID of the thread.

                Returns:
                    None
                """
        self.database.add_message(message.id, parent_id, conversation_id, thread_id)

    def clean_message_content(self, message):
        """
                Cleans the content of a Discord `Message` object by removing the @BOTNAME and extra whitespace.

                Args:
                    message (:obj:`discord.Message`): The Discord `Message` object whose content needs to be cleaned.

                Returns:
                    :obj:`str`: The cleaned content of the `Message` object.
                """

        return message.clean_content.replace(f'@{self.bot.user.display_name}', '').strip()
